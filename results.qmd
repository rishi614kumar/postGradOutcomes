# Results

In this section, we will explore several questions about the data, separated as parts.

## Preparing the Data

```{r}
library(ggplot2)
library(dplyr)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(tidytext))
```

```{r}
pseoe <- read_csv("data/pseoe_all.csv", show_col_types = FALSE)
degree_mapping <- read.csv("data/label_degree_level.csv")
cipcode_mapping <- read.csv("data/label_cipcode.csv")
institution_mapping <- read.csv("data/label_institution.csv")
```

```{r}
degree_mapping <- degree_mapping |>
  mutate(degree_level = sprintf("%02d", as.integer(degree_level)))

pseoe <- pseoe |>
  left_join(degree_mapping |> select(degree_level, label), by = "degree_level") |>
  rename(degree_label = label)

cipcode_mapping$cipcode <- as.character(cipcode_mapping$cipcode)

pseoe <- pseoe |>
  left_join(cipcode_mapping |> select(cipcode, label), by = "cipcode") |>
  rename(cipcode_label = label)

pseoe <- pseoe |>
  left_join(
    institution_mapping |>
      select(institution, label, city, institution_state) |>
      rename(
        institution_label = label,
        institution_city = city
      ),
    by = "institution"
  )
```

```{r}
truncate_by_words <- function(label, max_length) {
  words <- strsplit(label, " ")[[1]]
  cum_lengths <- cumsum(nchar(words)) + seq_along(words) - 1
  truncated <- max(which(cum_lengths <= max_length), 0)
  if (truncated < length(words)) {
    return(paste0(paste(words[1:truncated], collapse = " "), "..."))
  } else {
    return(label)
  }}
```

```{r}
max_char_length <- 25
pseoe <- pseoe |>
  mutate(
    degree_label = recode(degree_label,
                          "Certificate < 1 year"="Cert. < 1 yr",
                          "Certificate 1-2 years"="Cert. 1-2 yrs",
                          "Certificate 2-4 years"="Cert. 2-4 yrs",
                          "Post-Bacc Certificate"="Post-Bacc Cert.",
                          "Post-Masters Certificate"="Post-Masters Cert.",
                          "Doctoral - Research/Scholarship"="Doctoral - Research",
                          "Doctoral - Professional Practice"="Doctoral - Prof."),
    cipcode_label = sapply(cipcode_label, truncate_by_words, max_length = max_char_length)
  )
```

```{r}
pseoe <- pseoe |>
  mutate(degree_label = factor(degree_label, levels = unique(degree_label[order(degree_level)]))
  )
```

```{r}
cat("Rows:", nrow(pseoe), "\nColumns:", ncol(pseoe), "\n")
```

## How do Earnings Differ by Field of Study and Degree Type?

```{r, fig.width=10, fig.height=12}

top_n <-5

plot_df <-pseoe |>
  group_by(degree_level, degree_label, cipcode_label) |>
  summarize(
    median_y1_earnings = mean(y1_p50_earnings, na.rm = TRUE),
    median_y5_earnings =mean(y5_p50_earnings, na.rm = TRUE),
    median_y10_earnings= mean(y10_p50_earnings, na.rm = TRUE),
    .groups="drop"
  ) |>
  filter(
    !is.na(median_y1_earnings) | 
    !is.na(median_y5_earnings)| 
    !is.na(median_y10_earnings)
  ) |>
  arrange(degree_level, desc(median_y10_earnings)) |>
  group_by(degree_label) |>
  slice_head(n =top_n) |>
  mutate(
    cipcode_label=reorder_within(
      cipcode_label,-median_y10_earnings, degree_label
    )
  ) |>
  pivot_longer(
    cols = starts_with("median"), 
    names_to="year", values_to ="median_earnings"
  ) |>
  mutate(
    year=factor(
      year, levels=c(
        "median_y1_earnings","median_y5_earnings", "median_y10_earnings"
      ),
      labels=c("Year 1", "Year 5", "Year 10")
    ),
    degree_label =factor(
      degree_label, levels=unique(degree_label[order(degree_level)])
    )
  )

suppressWarnings(
  ggplot(plot_df, aes(x= cipcode_label, y=median_earnings, fill =year)) +
    geom_bar(stat ="identity", position="dodge",na.rm = TRUE) +
    facet_wrap(~degree_label, scales="free_x", nrow =2, drop =TRUE) + 
    scale_x_reordered() + 
    theme_minimal(base_size =14) + 
    labs(
      title =paste("Top", top_n, "Avg. Median Earnings by Field of Study and Degree Type") ,
      x= "Field of Study",
      y="Avg. Median Earnings (2021 Dollars)",
      fill ="Earnings Year"
    ) +
    theme(
      axis.text.x = element_text(angle =55, hjust =1, size=10),
      axis.title.y=element_text(margin = margin(r = 10)),
      strip.text = element_text(size = 12, face = "bold", margin = margin(b=5)),
      panel.grid.major.x= element_blank(),
      plot.margin = margin(t = 20, r= 10, b = 20, l = 20),
      legend.position="top", legend.direction="horizontal"
    )
)
```
